Sideeffects in React: that are not part of React rendering cycle(inside functional component)
eg: dynamic website have fetch calls 
doing a backend call, introducing a setTimeout, Introducing a setInterval 



Hooks: enable functional components to have acess to stateful logic(to have state) & lifecycle features(component mounted)

UseEffect: Helps us to perform these side effects in functional components
(data fetching shouldn't be done during rendering) -> you'll see infinte number of rendering during sending fetch calls 

############################################################################################
useEffect(()=>{

},[])  this dependency array takes state variables & anytime that state variable changes the code reruns


import { useEffect, useState } from 'react'
import axios from 'axios';

function App() {
  const [todos, setTodos] = useState([]);

  useEffect(()=>{
    axios.get("https://sum-server.100xdevs.com/todos")
    .then(function (response){
       setTodos(response.data.todos)
    })
  },[])

  return (
    <>
     {todos.map((todo)=> <Todo key={todo.key} title={todo.title} description={todo.description}></Todo>)}
    </>
  )
}

function Todo({title,description}){
  return <div>
    <h1>{title}</h1>
    <h5>{description}</h5>
  </div>
}

export default App
