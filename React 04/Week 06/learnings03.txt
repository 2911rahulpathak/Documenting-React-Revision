Each child in a list should have a unique "key" prop: ERROR
Solution:  {todos.map(todo => <Todo key={todo.id} title={todo.title} description={todo.description}></Todo>)}



import { useState } from "react";
  /*  
  One parent element:
  return (
      
      <Header title="ABC"></Header> 
      <Header title="NAME"></Header>
      
    )

    here if you don't want an extra div inside which you want to have these HEader component title
    use this: <> or<React.Fragment> </> instead of <div>
  */

  function App() {

    const [todos,setTodos] = useState([{
      id:1,
      title:"Go to gym",
      description:"Go to gym from 7 -9"
    },{
      id:2,
      title:"Study DSA",
      description:"Study from 9-11"
    },{
      id:3,
      title:"Study MERN",
      description:"Study MERN from 11-1"
    }]);
   // console.log(todos)
    //console.log(setTodos)

  function addTodo() {
    setTodos([...todos,{
      id:4,
      title:Math.random(),
      description:Math.random()
    }])
  }

    return (
     <div>
      <button onClick={addTodo}>Add a todo</button>
      {todos.map(todo => <Todo title={todo.title} description={todo.description}></Todo>)}
     </div>
    )
  }

  //{title} -> called object destructuring
  /* either {title} -> {title}
  or (props) & {props.title} */
  

// here function name was Header now pass it as anonymous function to React.memo()
//either do React.memo or destructure it {memo} & use it as memo instead of React.memo
function Todo({title, description}){
  return <div>
    <h1>{title}</h1>
    <h5>{description}</h5>
  </div>
}


  export default App
