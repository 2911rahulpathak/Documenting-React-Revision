Prop drilling: has nothing to do with re-rednering 
LCA : Lowest common ancestor should hold the state:

Push down the state 


import { useState } from "react"

function App() {
  const [count,setCount] = useState(0)

  return (
    <div>
      <Count count={count} setCount={setCount} ></Count>
     
    </div>
  )
}

//here Count component is just using count prop & is just passing setCount down to Button component
function Count({count,setCount}){
  return <div>
    {count}
    <Buttons count={count} setCount={setCount}></Buttons>
  </div>
}

function Buttons({count,setCount}){
  return <div>
    <button onClick={() =>{
        setCount(count+1)
    }}>Increment</button>
    
    <button onClick={() =>{
        setCount(count-1)
    }}>Decrement</button>
  </div>
}

export default App


You need to create something called as context -> API


import { useContext, useState } from "react"
import { CountContext } from "./Context";

function App() {
  const [count, setCount] = useState(0);

  //wrap inside anyone who wants use teleported value inside a provider
  return (
    <div>
      <CountContext.Provider value={count}>
      <Count count={count} setCount={setCount} />
      </CountContext.Provider>
      
    </div>
  )
}

function Count({setCount}) {
  return <div>
    <CountRenderer/>
    <Buttons setCount={setCount} />
  </div>
}

function CountRenderer() {
    const count = useContext(CountContext);
  return <div>
    {count}
  </div>
}

function Buttons({setCount}) {
  const count=useContext(CountContext);
 return <div>
    <button onClick={() => {
      setCount(count + 1)
    }}>Increase</button>

    <button onClick={() => {
      setCount(count - 1)
    }}>Decrease</button>
  </div>
}

export default App